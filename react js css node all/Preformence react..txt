Preformence react.
ביצועים בריאקט מתבטאים בכמה דברים.
1. חלוקה לצ'אנקים לחבילות ככה הבנדל לא יהיה גדול אלא יהיה מחולק.ככה אפשר לטעון כל חבילה רק בזמן שצריך אותה.

2.וירטואליזיישן - יש לי מערך גדוך של איטמים ובמקום שהוא יצטרך בפעם אחת לטעון לדום את הכל וזה יקח לו זמן אז רפשר להשתמש באינפיניטי סקרול, פיגיינשין,ריאקט וינדו. באופן הזה לפי כמות איטמים שאתן לו הוא יטען לדום כל פעם אייטמים נוספים מהמערך לדום. 

3.פרפורמנס לרנדורים כמו ריאקט ממו, יוזממו,יוזקולבק וref. 
const MemoChild = memo(Child1);
אפשר  באבא לרנדר את MemoChild
או אפשר בבן 
export default memo(Child1);

ממו בעצם אומר אם הפרופ שלי לא השתנה  אז הוא ידלג על הרירנדור מחדש של הקומפוננטה והוא ישתמש ברנדור האחרון ששמור לו בקש  אני לא ירנדר לך מחדש את Child1.
הוא עובד על פנקישן קומפוננט ומונע רנדורים מיותרים כאשר הפרופס הקודם שווה לפרוס שאחריו. אם יש לפרופס את אותו תוצאה.

******useMemo******
const memoArr = useMemo(()=> [1,2,4] ,[])
עובד על פונקציות ולא קומפוננטות.
אומר בעצם 2 דברים:
1. ממו יודע להתמודד רק עם פרמיטיבים כמו סטרינג,נמבר ובוליאן.
הוא לא יודע להתמודד עם מערך אוביקט או פונקציה ולכן הוא ירנדר למרות הממו שעשינו זאת אומרת הוא  ישבור את הממו שעשינו ולכן בשביל לפתור את זה נעביר useMemo שזה אומר נעביר לקומפוננטה Child1  את memoArr ולא את arr.

2. כשיש פונקציות שלוקחות הרבה משאבים למשל לולאה ארוכה של פור
שמחזירה תשובה. אז לא נרצה שכל פעם הוא יכנס לפונקציה הזאת ולכן נעשה useMemo.
const memoHeavy = useMemo(()=>heavyfn,[prop]);

const heavyfn = for loop.

היוזממו שומר בקש את התוצאה של אותו prop בדפנדסי. רק ברגע שאחד מהדפנדסי משתנה אז הוא יפעיל את הפונקציה אחרת הוא לא .

היוז ממו פועל רק מתי שאחד מהדפנדסי משתנה(משתנה)
const posts = Redux.useSelector(state => state.posts); 
const tags = React.useMemo(() => { return getTagsFromPosts(posts) }, [posts]);



usecallback
כל פעם שיש רנדור ריאקט מיצרת עוד מופע רפרנס חדש ולכן זה יוצא פונקציה חדשה.. אם נרצה להימנע מזה ולהתיחס לאותו רפרנס ולא לרפנרס חדש אז useCallback יפתור לנו.
יחסוך ביצירת פונקציות סתם..

const handleClick = useCallback(handleClick,[]);

const handleClick = useCallback(()=>handleClick,[prop]);

const dispatch = useDispatch();
const removeFromCart = React.useCallback(() => { dispatch(removeItem(product.id)) }, [product.id]);

The useMemo and useCallback Hooks are similar. The main difference is that useMemo returns a memoized value and useCallback returns a memoized function


יוזממו אומר כל עוד אחד מהדפנדסי שיש שם לא השתנה אז התוצאה תשאר אותו תוצאה ממה ששמור לו בקש כתוצאה מהרנדור הקודם ולכן הוא לא יצטרך לעשות את החישוב מימוש של הפונקציה.ויחזיר את התוצאה.
אם אחד מהדפנדסי משתנה אז הוא יכנס לפונקציה.
אני חוסך פה פריפורמנס כי יש פונקציות יקרות שלוקחות המון זמן.
 במקום שבכל רנדור הוא יעשה מחדש את החישוב אז הוא שומר בקש את התוצאה בהתאם לפרופ.


אם יש לי אבא ויש לי בן. ואני משנה את הסטייט שבתוך הבן אז ריאקט מרנדרת רק את הבן ומשאירה את השאר כמו שהם בלי לרנדר אותן שזה ילדים אחרים והאבא.
מתי הבעיה? שיש לי שינוי סטייט שהוא באבא ויש לאבא ילדים מה שיקרה בעקבות שינוי הסטייט באבא זה שכל הילדים יתרנדרו מחדש גם אם לא היה שינוי או שימוש בהם. לכן בשביל לפתור את זה יש את ריאקט ממו. בתוך כל אחד מהבנים שאני לא רוצה שיתרנדרו נעטוף את הקומפוננטה שכל כל ילד בריאקט ממו. ואז הוא  ימנע מלרנדר את הקומפוננטה ילד.
במידה ואני מעביר מהאבא לילדים פרופ שהם אובייקט מערך או פונקציה אז אני יצטרך להעביר את הפרור דרך useMemo ואם זה לפונקציה אז דרך useCallback.
אם זה פרמיטיב כמו סטרינג בוליאן או נמבר אז לא צריך.
זה קורה בגלל שפונקציה מערך ואובייקט מועברים בי רפרנס ולא בי וואליו ולכן כל רנדור הם שונים עם כתובת אחרת כי ההשוואה רדודה ולא עמוקה.  
אם הם פרמיטיבים אז בי וואליו ואז התוכן נשאר זהה והוא יודע להשוות על ידי התוכן.
 
 