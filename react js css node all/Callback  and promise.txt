Callback  and promise

Callback 
פונקציה כפרמטר שקוראת ישר אחרי שהפונקציה המקורית מסתיימת.
לבדיקות של תנאים. תמתין לcallback שיסתיים ואז נוכל להשתמש בפונקציה.
נעשה callback ולא return כי return יחזור ישר בלי לחכות וזה לא טוב כי אם לפונקציה לוקח זמן.. בדרך פונקציות אסנכורניות..או כאלה שמחכות לקליק או לכתיבה.. או קבלה בחסרה דטה מהסרבר..לכן ,נחזיר callback ותא return. ה callback יחכה עד שהפונקציה תסתיים.
ברגע שנתחיל להכניס כפרמטרים מלא callback זה יהיה מסורבל ולכן נשתמש במקום ב promise
 
Promise 
מייצר לנו פונקציות אסנכרוניות כמו setTimeout, fetch,setInterval  בצורה יותר נקייה וקריאה מאשר callback. ל promise יש resolve שזה בעצם אחרי שזה הצליח לקרות ו reject אם זה לא הצליח. 
נשים שם דברים שלוקחים מלא זמן כמו setTimeout וכשאני רוצה לקרוא לפרמיס דרך משתנה שיצרתי אז אני עושה את שם המשתנה ( { ..consol }<= user)then.

ובסוף את ה 
.catch(err => console.log(err.message))

יש [a,b,c]promise.all במקום then שזה לפונקציה אחת.. מקבל את כל הפונקציות האסנכרוניות a b c ומריץ במקביל, ורק שכולם יסתיימו אז יהיה אפשר להשתמש בערכים שלהם שחזרו.
אם נעשה then then then אז כל פעם הוא יחכה שהפונקציה האסנכרונית תסתיים ורק אחרי זה יריץ את הפוקנציה האסנכרונית השניה וככה הלאה. ב promise.all מריץ את כולם ביחד ומחכה שכולם יסתיימו.

יש [a,b,c]promise.race שמקבל 3 פונקציות אסנכרוניות והראשון מבניהם שיסתיים הוא יביא לי רק אותו ולא את כולם.

ויש כתיב יותר קצר וקריא של async ו await שנעטוף אותו ב try ו catch

 async function getAllUsers() {
try{
  const getuser = await getuser();
  console.log(getuser);
}catch(err){
  console.log(err);
 }
}
getAllUsers();







פרמיס ? אם נרצה להחזיר משהו שלוקח לו זמן שירוץ בטרד אחר בבראוזר. למשל שעושה בקשה ל api fetch או עבודה עם קבצים או setTimeout או setInterval כל הפעולות שהם אסנכרוניות. פעולות שלוקחות זמן ולא נרצה לחכות לאן כי אז הקוד לא ימשיך. הקוד ברגיל רץ שורה אחר שורה שזה סנכרוני. בגלל זה בטרד אחר בבראוזר אם יש פקודה שהיא אסנכרונית.
אם נעשה למשל פקודה.
let i = asyncfunc();

בגלל שהפונקציה היא אסנכרונית אז במימוש שלה היא עטופה ב promise.
function asyncfunc(){
return new Prmise((resolve,reject)=>{
If...
resolve(cities);
else
{reject}
})
}

וההפעלה שלה תהיה על ידי then
let result = asyncfunc().then(res=> console.log(res))
ה then בעצם אומר לו תחכה עד שתקבל את התשובה ואז תחזיר את התשובה ל result. אם לא נעשה את זה הקוד ימשיך בלי לחכות ולא יהיה כלום ב result.



Promise לפונקציה
מחכה  שהפונקציה שתלויים בה תסתיים ואז מפעיל פונקציה שמשתמשת בה.
  function operation() {
    return new Promise(function(resolve, reject) {
        var a = 0;
        var b = 1;
        a = a + b;
        a = 5;

        // may be a heavy db call or http request?
        resolve(a) // successfully fill promise
    })
}

async function app() {
    var a = await operation(); // a is 5
    console.log(a);
}

app()

אם היינו מפעילים ללא הפרמיס היינו מקבלים undefind הערך ההתחלתי כי הוא לא הספיק לחשב וכבר הפוקדה הבאה זה להציג את המשתנה.


הקוד ירוץ שורה שורה אבל אם תהיה שורה שהיא אסנכרונית למשל סייטטימאטוט או פרמיס הוא יריץ אבל לא יבצע אותה זאת אומרת או ישים אותם בצד במקום שנקרא web api ורק שכל הקוד יסתיים כי הוא עובר שורה שורה וה main יסתיים אז הוא יפעיל את את מה ששמנו ב web api. זאת אומרת יש את ה web api לאחר שהשניות נגצרו ב setTimeout הוא יעביר את זה לqueue ששם מחכהצלקוד שיתסיים ואז יקח משם את הפונקציה ויפעיל אותה.
יש מיקרוטסק ויש מאקרוטסק.
המיקרו הם יהיו בעדיפות ואז יעבור למקרו.
מאקרו זה טסטקים למשל סטייטטיימאווא סיטאינטרוול וכו.
מיקרו זה jobs למשל פרמיס.




https://dmitripavlutin.com/what-is-javascript-promise/

פונקציה אסנכרונית זאת פונקציה שלוקח לה זמן עד שהנתונים יגיעו או שאני רוצה בעצם לעשות גם דיליי של זמן . בתוך הפונקציה יש שורה שמקבלת פרמיס -               await delay -  ה delay מחזיר פרמיס שזה הריזולב שבתוכו זה הוואליו או ריג'קט שזה הארור.
מה שחשוב להבין זה  שעושים await בתוך הפונקציה האסנכרונית אז הוא ממתין שם עד לקבלת הנתונים שזה בטרד אחר של הבראוזר. ובנתיים הטרד הראשי שעל הסטק ממשיך זאת אומרת ממשיך את הקוד שמחוץ לפונקציה וככה לא תוקע את המשך הקוד. ברגע שהפרמיס מוכן וכל הפעולות של הטרד הראשי הסתיימו אז הוא חוזר לפונקציה האסנכרונית וממשיך משורת await delay.
רק ברגע שמה שבפרמיס הסתיים הוא יחזיר תשובה (תוקע רק את הפונקציה האסנכרוני מלהמשיך אבל לא את שאר הקוד מחוץ לפונקציה).

function getList() {

return new Promise((resolve, reject) => {

setTimeout(() => reject(new Error('Nobody here!')), 1000);

});

}

async function findPerson(who) {

try {

const list = await getList();

const found = list.some(person => person === who);

console.log(found); 

} catch (error) {

console.log(error); // logs Error('Nobody here!')

}

}

findPerson('Joker');









function delayDouble(number) {

return new Promise((resolve, reject) => {

setTimeout(() => resolve(2 * number), 1000);

});

}

async function run() {

const value1 = await delayDouble(5);

console.log(value1); // logs 10

const value2 = await delayDouble(value1);

console.log(value2); // logs 20

const value3 = await delayDouble(value2);

console.log(value3); // logs 40

}

run();


